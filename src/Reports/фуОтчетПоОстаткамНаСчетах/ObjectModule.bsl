#Область о //Регистрация отчета:

Функция СведенияОВнешнейОбработке() Экспорт
    
    ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
    Синоним = ЭтотОбъект.Метаданные().Синоним; 
    Синоним = ?(ЗначениеЗаполнено(Синоним),Синоним, ИмяОтчета);         
    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид","ДополнительныйОтчет"); //может быть – ПечатнаяФорма, ЗаполнениеОбъекта (для вн.обработки), ДополнительныйОтчет, СозданиеСвязанныхОбъектов… 
    РегистрационныеДанные.Вставить("Наименование", Синоним); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
    РегистрационныеДанные.Вставить("Версия", "1.5");
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
    РегистрационныеДанные.Вставить("Информация", "Отчет "+Синоним); //так будет выглядеть описание вн.отчета для пользователя
	
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет" , "ОткрытиеФормы", Истина, );
        
    // Сохраним таблицу команд в параметры регистрации обработки
    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
    
    Возврат РегистрационныеДанные;
                                       
КонецФункции

Функция ПолучитьТаблицуКоманд()
    
    // Создадим пустую таблицу команд и колонки в ней
    Команды = Новый ТаблицаЗначений;

    // Как будет выглядеть описание печатной формы для пользователя
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

    // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

    // Тут задается, как должна вызваться команда обработки
    // Возможные варианты:
    // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
    // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
    // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

    // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

    // Для печатной формы должен содержать строку ПечатьMXL 
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
    
    // Добавляем команду в таблицу команд по переданному описанию.
    // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры 

#КонецОбласти

#Область о //Получение данных для объекта:

Функция ПолучитьКурсыВалют(дДата1,дДата2)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ДатаКалендаря КАК Период,
		|	ВложенныйЗапрос.Валюта КАК Валюта,
		|	КурсыВалют.Курс КАК Курс
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДанныеПроизводственногоКалендаря.Дата КАК ДатаКалендаря,
		|		МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса,
		|		КурсыВалют.Валюта КАК Валюта
		|	ИЗ
		|		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|			ПО ДанныеПроизводственногоКалендаря.Дата >= КурсыВалют.Период
		|	ГДЕ
		|		ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &Дата1 И &Дата2
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеПроизводственногоКалендаря.Дата,
		|		КурсыВалют.Валюта) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО ВложенныйЗапрос.ДатаКурса = КурсыВалют.Период
		|			И ВложенныйЗапрос.Валюта = КурсыВалют.Валюта";
	
	Запрос.УстановитьПараметр("Дата1", дДата1);
	Запрос.УстановитьПараметр("Дата2", дДата2);
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Период");
	
	Возврат тз;	
	
КонецФункции

Функция ПолучитьКурсыВалютПоПериоду(сОсновныеВалюты,тзКурсыВалют,дПериод)
	
	стрКурсыВалют = Новый Структура;
	стрКурсыВалют.Вставить("Рубль",0);
	стрКурсыВалют.Вставить("Доллар",0);
	стрКурсыВалют.Вставить("Евро",0);
	
	стрКурсыВалют.Вставить("ЕвроКДоллару",0);
	стрКурсыВалют.Вставить("РубльКДоллару",0);
	
	стрПоиск = Новый Структура("Период",дПериод);
	массКурсыВалют = тзКурсыВалют.НайтиСтроки(стрПоиск);
	
	Для каждого стрКурсы из массКурсыВалют Цикл
		
		Если стрКурсы.Валюта = сОсновныеВалюты.Рубль Тогда
			
			стрКурсыВалют.Рубль = стрКурсы.Курс;		
			
		ИначеЕсли стрКурсы.Валюта = сОсновныеВалюты.Евро Тогда
			
			стрКурсыВалют.Евро = стрКурсы.Курс;
			
		ИначеЕсли стрКурсы.Валюта = сОсновныеВалюты.Доллар Тогда 
			
			стрКурсыВалют.Доллар = стрКурсы.Курс;

		КонецЕсли;
		
	КонецЦикла;	
	
	Если стрКурсыВалют.Доллар <> 0 Тогда
		
		стрКурсыВалют.ЕвроКДоллару = стрКурсыВалют.Евро / стрКурсыВалют.Доллар;	
		
	КонецЕсли;
		
	Если стрКурсыВалют.Доллар <> 0 Тогда
		
		стрКурсыВалют.РубльКДоллару = 1 / стрКурсыВалют.Доллар;	
		
	КонецЕсли;
	
	Возврат стрКурсыВалют; 
	
КонецФункции

Функция ПолучитьСуммуВДолларах(ТекущиеДанные, стрКурсыВалют, сОсновныеВалюты)
	
	чСуммаВДолларах = 0;
	
	Если ТекущиеДанные.ВалютаСчета = сОсновныеВалюты.Рубль Тогда
		
		чСуммаВДолларах = ТекущиеДанные.СуммаОстаток * стрКурсыВалют.РубльКДоллару;	
		
	ИначеЕсли ТекущиеДанные.ВалютаСчета = сОсновныеВалюты.Евро Тогда 
		
		чСуммаВДолларах = ТекущиеДанные.СуммаОстаток * стрКурсыВалют.ЕвроКДоллару;	
		
	ИначеЕсли ТекущиеДанные.ВалютаСчета = сОсновныеВалюты.Доллар Тогда  	
		
		чСуммаВДолларах = ТекущиеДанные.СуммаОстаток;
		
	Иначе
		
		фуОбщийКлиентСервер.СообщитьПользователю("Внимание! Валюта: "+ТекущиеДанные.ВалютаСчета+" не определена для конвертации в отчете (расчет суммы в доллары)!");
	
	КонецЕсли;
	
	Возврат Окр(чСуммаВДолларах,2);
	
КонецФункции

&НаСервере
Функция СформироватьИтоговуюТаблицу(дДата1,дДата2)
	
	сОсновныеВалюты = фуОперацииСВалютамиКлиентСервер.ПолучитьОсновныеВалютыСервер();
	тзКурсыВалют = фуОперацииСВалютамиКлиентСервер.ПолучитьКурсыВалют(дДата1,дДата2);
	тзОстаткиПоСчетам = фуОперацииСВалютамиКлиентСервер.ПолучитьОстаткиПоСчетамВДолларах(дДата1,КонецДня(дДата2)+1,сОсновныеВалюты,тзКурсыВалют);

	тзИтоговаяТаблица = Новый ТаблицаЗначений;
	тзИтоговаяТаблица.Колонки.Добавить("Период");
	тзИтоговаяТаблица.Колонки.Добавить("РасчетныйСчет");
	тзИтоговаяТаблица.Колонки.Добавить("Валюта");
	тзИтоговаяТаблица.Колонки.Добавить("СуммаОстаток");
	тзИтоговаяТаблица.Колонки.Добавить("СуммаОстатокДоллары");
	
	// Начало периода:
	ДобавитьСтрокуПоПериоду(тзИтоговаяТаблица,тзОстаткиПоСчетам,дДата1);
	
	// Конец периода:
	ДобавитьСтрокуПоПериоду(тзИтоговаяТаблица,тзОстаткиПоСчетам,КонецДня(дДата2)+1,Истина);
    
	Возврат тзИтоговаяТаблица;
	
КонецФункции

Процедура ДобавитьСтрокуПоПериоду(тзИтоговаяТаблица,тзОстаткиПоСчетам,Период,СкорректироватьКрайнийПериод = Ложь)
	
	ПоискСтроки = Новый Структура;
	ПоискСтроки.Вставить("Период",НачалоДня(Период));
	
	ОстаткиПоСчетамМассив = тзОстаткиПоСчетам.НайтиСтроки(ПоискСтроки);
	Для каждого ОстаткиПоСчетамСтрока из ОстаткиПоСчетамМассив Цикл
        
        Если ОстаткиПоСчетамСтрока.СуммаОстаток1 <> 0 Тогда
    		ИтоговаяСтрока = тзИтоговаяТаблица.Добавить();
    		ЗаполнитьЗначенияСвойств(ИтоговаяСтрока,ОстаткиПоСчетамСтрока);
    		ИтоговаяСтрока.Валюта = ОстаткиПоСчетамСтрока.ВалютаСчета;
    		ИтоговаяСтрока.СуммаОстаток = ОстаткиПоСчетамСтрока.СуммаОстаток1;
    		ИтоговаяСтрока.СуммаОстатокДоллары = ОстаткиПоСчетамСтрока.СуммаОстатокДоллары1;
        КонецЕсли; 
        
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область о //Служебные процедуры и функции:

Функция ПолучитьПредопределенныйЭлементПользовательскихНастроек(ЭлементНастроекВарианта, ПользовательскиеНастройки) Экспорт
    
    НайденныйЭлемент = Неопределено;
    
    Если ЭлементНастроекВарианта <> Неопределено Тогда
        
        НайденныйЭлемент = ПользовательскиеНастройки.Элементы.Найти(ЭлементНастроекВарианта.ИдентификаторПользовательскойНастройки);
        
    КонецЕсли;
        
    Возврат НайденныйЭлемент;
    
КонецФункции

Функция ПолучитьПользовательскийПараметр(ИмяПараметра, КомпоновщикНастроек)
    
    НайденныйПараметр = Неопределено;
    
    НайденныйПараметрВарианта = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
    
    Если НайденныйПараметрВарианта <> Неопределено Тогда
        
        НайденныйПараметр = ПолучитьПредопределенныйЭлементПользовательскихНастроек(НайденныйПараметрВарианта, КомпоновщикНастроек.ПользовательскиеНастройки);
        
    КонецЕсли;
    
    Возврат НайденныйПараметр;
    
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Параметры отчета:
	ПериодВОтчете 		= ПолучитьПользовательскийПараметр("ПериодВЗапросе", КомпоновщикНастроек);
	дДата1				= ПериодВОтчете.Значение.ДатаНачала;	 			
	дДата2              = ПериодВОтчете.Значение.ДатаОкончания;	
    
	ВнешнийИсточникДанных = СформироватьИтоговуюТаблицу(дДата1,дДата2);

	// Заносим пользовательские настройки для отображения на форме обратно в компоновщик:
	КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	//
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки); 

	ВнешниеНаборы = Новый Структура("тзОстатки", ВнешнийИсточникДанных);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти


