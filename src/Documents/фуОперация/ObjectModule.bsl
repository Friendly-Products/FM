#Область о // Служебные процедуры и функции:

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//РасчетКурсовОбменаНаСервере();
	РасчетДопРеквизитов();	
	
КонецПроцедуры   

Процедура ПриЗаписи(Отказ)
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ЭтотОбъект.ВалютаУправленческогоУчета = Константы.фуВалютаУправленческогоУчета.Получить();
	
КонецПроцедуры

#КонецОбласти           

#Область о // Обработка проведения:

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ПроверкаВозможностиПроведенияДокумента(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;  
	
	//
	сОсновныеВалюты = фуОперацииСВалютамиКлиентСервер.ПолучитьОсновныеВалютыСервер();
	//
	
	ЗаписьДвижений_фуОстаткиНаРасчетныхСчетах(Отказ,РежимПроведения,сОсновныеВалюты);
	ЗаписьДвижений_фуДвиженияДенежныхСредств(Отказ,РежимПроведения,сОсновныеВалюты);
	ЗаписьДвижений_фуДоходыИРасходы(Отказ,РежимПроведения,сОсновныеВалюты);
	//ЗаписьДвижений_фуВзаиморасчетыСКонтрагентами(Отказ,РежимПроведения);
	
КонецПроцедуры

#Область о // Запись движений: "Остатки на расчетных счетах":

Процедура ЗаписьДвижений_фуОстаткиНаРасчетныхСчетах(Отказ,РежимПроведения,сОсновныеВалюты)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Движения.фуОстаткиНаРасчетныхСчетах.Записывать = Истина;
	
	Если ЭтотОбъект.СуммаПлатежа <> 0 Тогда 

		ВалютаСчета = ЭтотОбъект.РасчетныйСчет.ВалютаСчета; 
		
		Движение = Движения.фуОстаткиНаРасчетныхСчетах.Добавить();
		Если ЭтотОбъект.СуммаПлатежа > 0 Тогда
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Иначе
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
		
		Движение.Период = ЭтотОбъект.Дата;
		Движение.РасчетныйСчет = ЭтотОбъект.РасчетныйСчет;

		Движение.Сумма = ЭтотОбъект.СуммаПлатежа;
		Если ЭтотОбъект.СуммаПлатежа < 0 Тогда
			Движение.Сумма = (-1) * Движение.Сумма;	
		КонецЕсли;                               
		
		Движение.Основание = ""; 
		
	КонецЕсли;	
	
	//// Списываем с основого счета:
	//// (Два разных списания нужны для того, чтобы при конвертации суммы списания в долларах у нас не разошлись центы с регистром фмДвиженияДенежныхСредств).
	//
	//// Основная сумма:
	//Если ЭтотОбъект.СуммаРасхода <> 0 Тогда 
	//
	//	//
	//	ВалютаСчета = ЭтотОбъект.РасчетныйСчет.ВалютаСчета;
	//	//

	//	Движение = Движения.фуОстаткиНаРасчетныхСчетах.Добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//	Движение.Период = ЭтотОбъект.Дата;
	//	Движение.РасчетныйСчет = ЭтотОбъект.РасчетныйСчет;
	//	Движение.Валюта = ВалютаСчета;
	//	Движение.Сумма = ЭтотОбъект.СуммаРасхода;
	//	Движение.Основание = "Внутрифирменные расчеты"; 
	//	
	//КонецЕсли;
	//
	//// Получаем на корр. счет:
	//Если ЭтотОбъект.СуммаПрихода <> 0 Тогда 

	//	//
	//	ВалютаСчета = ЭтотОбъект.КоррСчёт.ВалютаСчета;
	//	//

	//	Движение = Движения.фуОстаткиНаРасчетныхСчетах.Добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	//	Движение.Период = ЭтотОбъект.Дата;
	//	Движение.РасчетныйСчет = ЭтотОбъект.КоррСчёт;
	//	Движение.Валюта = ВалютаСчета;
	//	Движение.Сумма = ЭтотОбъект.СуммаПрихода;
	//	Движение.Основание = "Внутрифирменные расчеты"; 
	//	
	//КонецЕсли;
	//	
	//// Комиссия:
	//Если ЭтотОбъект.КомиссияНаКонвертацию <> 0 Тогда 
	//
	//	//
	//	//СтатьяДДС_КомиссияЗаВходящиеПлатежи = Справочники.фуСтатьиЗатрат.НайтиПоКоду("003");
	//	РасчетныйСчетСсылка = ЭтотОбъект.РасчетныйСчет;
	//	//Если ЭтотОбъект.СтатьяЗатратНаКомиссию = СтатьяДДС_КомиссияЗаВходящиеПлатежи Тогда
	//	Если ЭтотОбъект.СтатьяЗатратНаКомиссию.ПереносЗатратНаКоррСчет Тогда
	//		РасчетныйСчетСсылка = ЭтотОбъект.КоррСчёт;	
	//	КонецЕсли;
	//	ВалютаСчета = РасчетныйСчет.ВалютаСчета;
	//	//
	//	
	//	Движение = Движения.фуОстаткиНаРасчетныхСчетах.Добавить();
	//	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	//	Движение.Период = ЭтотОбъект.Дата;
	//	Движение.РасчетныйСчет = РасчетныйСчетСсылка;
	//	Движение.Валюта = ВалютаСчета;
	//	Движение.Сумма = ЭтотОбъект.КомиссияНаКонвертацию;
	//	Движение.Основание = "Внутрифирменные расчеты: Комиссия"; 
	//	
	//КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область о // Запись движений: "Движения денежных средств":

Процедура ЗаписьДвижений_фуДвиженияДенежныхСредств(Отказ,РежимПроведения,сОсновныеВалюты)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.СуммаПлатежа = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.фуДвиженияДенежныхСредств.Записывать = Истина;
	ВалютаСумма = РаботаСКурсамиВалют.ПересчитатьВВалюту(ЭтотОбъект.СуммаПлатежа,
														 ЭтотОбъект.ВалютаОперации,
														 сОсновныеВалюты.Доллар,
														 ЭтотОбъект.Дата);

	Движение = Движения.фуДвиженияДенежныхСредств.Добавить();
	Движение.Период = ЭтотОбъект.Дата;
	Движение.СтатьяЗатрат = ЭтотОбъект.СтатьяЗатрат;
	Движение.ВалютаУправленческогоУчета = ЭтотОбъект.ВалютаУправленческогоУчета;
	Движение.Сумма = ВалютаСумма;
	Движение.Основание = ""; 
        
	//// Внутрифирменные расчеты:	
	//ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.ВнутрифирменныеРасчеты Тогда  	
	//	
	//	// Комиссия:
	//	Если ЭтотОбъект.КомиссияДоллары <> 0 Тогда
	//		
	//		Движение = Движения.фуДвиженияДенежныхСредств.Добавить();
	//		Движение.Период = ЭтотОбъект.Дата;
	//		Движение.СтатьяДДС = ЭтотОбъект.СтатьяЗатратНаКомиссию;
	//		Движение.СуммаДоллары = (-1)*ЭтотОбъект.КомиссияДоллары; // Комиссия для нас отрицательный оборот, так как расход
	//		Движение.Основание = Строка(ЭтотОбъект.ВидОперации)+": Комиссия"; 
	//		
	//	КонецЕсли;

	//	// Курсовая разница:
	//	Если ЭтотОбъект.КурсоваяРазницаДоллары <> 0 Тогда
	//		
	//		Движение = Движения.фуДвиженияДенежныхСредств.Добавить();
	//		Движение.Период = ЭтотОбъект.Дата;
	//		Движение.СтатьяДДС = ЭтотОбъект.СтатьяЗатрат;
	//		Движение.СуммаДоллары = ЭтотОбъект.КурсоваяРазницаДоллары; 
	//		Движение.Основание = Строка(ЭтотОбъект.ВидОперации)+": Курсовая разница";
	//		
	//	КонецЕсли;
	//	// 
	//		
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область о // Запись движений: "Доходы и расходы":

Процедура ЗаписьДвижений_фуДоходыИРасходы(Отказ,РежимПроведения,сОсновныеВалюты)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;     
	
	Если ЭтотОбъект.СуммаНачисленияВВалютеУУ = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Движения.фуДоходыИРасходы.Записывать = Истина;
	
	СуммаВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(ЭтотОбъект.СуммаНачисленияВВалютеУУ,
	                                                     ЭтотОбъект.ВалютаУправленческогоУчета,
														 сОсновныеВалюты.Доллар,
														 ЭтотОбъект.Дата); 
							
	Движение 				= Движения.фуДоходыИРасходы.Добавить();
    Движение.Период 		= ЭтотОбъект.Дата;
    Движение.СтатьяЗатрат	= ЭтотОбъект.СтатьяЗатрат;
    Движение.ВалютаУправленческогоУчета = ЭтотОбъект.ВалютаУправленческогоУчета;
	Движение.Сумма 			= СуммаВалюта; 
    //
    Движение.Контрагент		= ЭтотОбъект.Контрагент;
    Движение.Основание		= "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область о // Вспомогательные процедуры и функции:

Процедура РасчетДопРеквизитов()
	
	// Вычисляемые поля:
	ЭтотОбъект.ОтображениеВнутрифирменныхРасчетов = ПолучитьОтоброжениеВнутрифирменныхРасчетов();
	ЭтотОбъект.ОтображениеРасчетныйСчет = ЭтотОбъект.РасчетныйСчет.Наименование;
    ЭтотОбъект.ОтображениеРасчетныйСчетСсылка = ЭтотОбъект.РасчетныйСчет;
	
	// Отредактировал:
	ЭтотОбъект.Отредактировал = Строка(Пользователи.ТекущийПользователь())+" - "+ТекущаяДата();	
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВалютаОперации) Тогда
		ЭтотОбъект.ВалютаОперации = ЭтотОбъект.РасчетныйСчет.ВалютаСчета;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВалютаУправленческогоУчета) Тогда
		ЭтотОбъект.ВалютаУправленческогоУчета = Константы.фуВалютаУправленческогоУчета.Получить();	
	КонецЕсли;  
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.КурсУправленческойВалюты) Тогда
		ЭтотОбъект.КурсУправленческойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ЭтотОбъект.ВалютаУправленческогоУчета, ЭтотОбъект.Дата).Курс;	
	КонецЕсли;   
	
	сОсновныеВалюты = фуОперацииСВалютамиКлиентСервер.ПолучитьОсновныеВалютыСервер();
	ЭтотОбъект.СуммаПлатежаВВалютеУУ = РаботаСКурсамиВалют.ПересчитатьВВалюту(ЭтотОбъект.СуммаПлатежа,
	                                                     ЭтотОбъект.ВалютаОперации,
														 сОсновныеВалюты.Доллар,
														 ЭтотОбъект.Дата); 

КонецПроцедуры

Функция ПолучитьОтоброжениеВнутрифирменныхРасчетов()
	
	стрОтображение = "";                          
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СуммаРасхода) ИЛИ ЗначениеЗаполнено(ЭтотОбъект.СуммаПрихода) Тогда

		Если ЗначениеЗаполнено(ЭтотОбъект.СуммаРасхода) Тогда
			стрОтображение = стрОтображение + ЭтотОбъект.СуммаРасхода + " ";	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.РасчетныйСчет) Тогда
			стрОтображение = стрОтображение + ЭтотОбъект.РасчетныйСчет.ВалютаСчета + " ";	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.СуммаПрихода) Тогда
			стрОтображение = стрОтображение + "-> " + ЭтотОбъект.СуммаПрихода + " ";	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.КоррСчёт) Тогда
			стрОтображение = стрОтображение + ЭтотОбъект.КоррСчёт.ВалютаСчета;	
		КонецЕсли;
			
		Если стрОтображение = "" Тогда
			стрОтображение = ЭтотОбъект.Контрагент.Наименование;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат стрОтображение; 
	
КонецФункции

#КонецОбласти        

#Область о // Мусор. Позже удалить:

//Функция ЗнакПоВидуОперации(стрДействие, перВидОперации)
//	
//	// Схема получения знака:
//	//		Расчеты с покупателями: (мы продаем)
//	//			Отгрузка: -
//	//			Оплата  : +
//	//
//	//		Расчеты с поставщиками: (нам продают)
//	//			Отгрузка: +
//	//			Оплата  : -
//	
//	чЗнакОперации = 1;
//	
//	Если перВидОперации = Перечисления.фуВидыОпераций.РасчетыСПокупателями Тогда
//		
//		Если стрДействие = "Отгрузка" Тогда
//			чЗнакОперации = -1;
//		КонецЕсли;
//		
//	ИначеЕсли перВидОперации = Перечисления.фуВидыОпераций.РасчетыСПоставщиками Тогда
//		
//		Если стрДействие = "Оплата" Тогда
//			чЗнакОперации = -1;
//		КонецЕсли;
//		
//	КонецЕсли;
//		
//	Возврат чЗнакОперации; 
//	
//КонецФункции

//Функция РасчетРазнесенияВыписки()
//	
//	РазнесениеВыпискиБулево = Истина;
//	
//	Если ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.ВнутрифирменныеРасчеты Тогда
//		
//		Если ЭтотОбъект.СуммаРасхода <> 0 И
//			 ЭтотОбъект.СуммаПрихода <> 0 И
//			 ЗначениеЗаполнено(ЭтотОбъект.РасчетныйСчет) И
//			 ЗначениеЗаполнено(ЭтотОбъект.КоррСчёт) И
//			 ЗначениеЗаполнено(ЭтотОбъект.СтатьяЗатрат) 
//		Тогда
//			РазнесениеВыпискиБулево = Ложь;
//		КонецЕсли;			 
//		
//	Иначе	
//		
//		// Заполнение всех реквизитов:
//		РасчетныйСчетСсылка = ЭтотОбъект.РасчетныйСчет;
//		
//		Если ЗначениеЗаполнено(РасчетныйСчетСсылка) И
//			 ЗначениеЗаполнено(ЭтотОбъект.ВидОперации) И
//			 ЗначениеЗаполнено(ЭтотОбъект.СтатьяЗатрат)		 
//		Тогда
//			РазнесениеВыпискиБулево = Ложь;
//		КонецЕсли;
//		
//		// Если нет платежных данных:
//		Если (ЭтотОбъект.ОплатаСумма 	= 0) И 
//			 (ЭтотОбъект.СуммаПрихода 	= 0) И
//			 (ЭтотОбъект.СуммаРасхода 	= 0)
//		Тогда
//			РазнесениеВыпискиБулево = Ложь;
//		КонецЕсли;			 
//		
//	КонецЕсли;

//	Возврат РазнесениеВыпискиБулево;	
//		
//КонецФункции

//Функция РасчетСуммДДСНаСервере()
//	
//	сОсновныеВалюты = фуОперацииСВалютамиКлиентСервер.ПолучитьОсновныеВалютыСервер(); 
//	
//	стрРасчетСуммДДС = Новый Структура;
//	стрРасчетСуммДДС.Вставить("СуммаДоллары_Основная",0);
//	стрРасчетСуммДДС.Вставить("СуммаДоллары_КоррСчет",0);
//	стрРасчетСуммДДС.Вставить("СуммаДоллары_Комиссия",0);
//	стрРасчетСуммДДС.Вставить("СуммаДоллары_КурсоваяРазница",0);
//	
//	//
//	дДатаКонвертациии = ЭтотОбъект.Дата;
//	//
//	
//	//
//	ВалютаРасчетныйСчет = РасчетныйСчет.ВалютаСчета;
//	ВалютаКоррСчет		= КоррСчёт.ВалютаСчета;
//	//
//	стрРасчетСуммДДС.СуммаДоллары_Основная 			= РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаРасхода,ВалютаРасчетныйСчет,сОсновныеВалюты.Доллар,дДатаКонвертациии);
//	стрРасчетСуммДДС.СуммаДоллары_Комиссия			= РаботаСКурсамиВалют.ПересчитатьВВалюту(КомиссияНаКонвертацию,ВалютаРасчетныйСчет,сОсновныеВалюты.Доллар,дДатаКонвертациии);
//	стрРасчетСуммДДС.СуммаДоллары_КоррСчет 			= РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаПрихода,ВалютаКоррСчет,сОсновныеВалюты.Доллар,дДатаКонвертациии);
//	//
//	стрРасчетСуммДДС.СуммаДоллары_КурсоваяРазница	= стрРасчетСуммДДС.СуммаДоллары_КоррСчет - стрРасчетСуммДДС.СуммаДоллары_Основная;
//	
//	Возврат стрРасчетСуммДДС;
//	
//КонецФункции

//Процедура РасчетКурсовОбменаНаСервере() Экспорт
//	
//	стрРасчетСуммДДС = РасчетСуммДДСНаСервере();
//	
//	ЭтотОбъект.КомиссияДоллары 			= стрРасчетСуммДДС.СуммаДоллары_Комиссия;
//	ЭтотОбъект.КурсоваяРазницаДоллары	= стрРасчетСуммДДС.СуммаДоллары_КурсоваяРазница;	

//КонецПроцедуры

//Процедура ПроверкаСчета(Отказ,Счет,СообщениеОбОшибке = "")
//	
//	Если ЗначениеЗаполнено(Счет) Тогда
//		
//		ВалютаСчета = Счет.ВалютаСчета; 
//		Если Не фуОбщийКлиентСервер.ПроверкаЗаполненияВалютыСчета(ВалютаСчета) Тогда
//			
//			фуОбщийКлиентСервер.ВывестиСообщениеОНеЗаполненнойВалютеСчета(Счет,,ЭтотОбъект);
//			Отказ = Истина;
//			
//		КонецЕсли;
//		
//	Иначе
//		
//		фуОбщийКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
//		
//	КонецЕсли;

//КонецПроцедуры

//Процедура ПроверкаСчетовВДокументе(Отказ)
//	
//	ПроверкаСчета(Отказ,ЭтотОбъект.РасчетныйСчет,"Внимание! Не заполнен расчетный счет. Проведние документа: "+ЭтотОбъект.Ссылка+" отменено.");
//	ПроверкаСчета(Отказ,ЭтотОбъект.КоррСчёт,"Внимание! Не заполнен корр счет. Проведние документа: "+ЭтотОбъект.Ссылка+" отменено.");
//	
//КонецПроцедуры

//Процедура ПроверкаСтатьиЗатрат(Отказ,СтатьяЗатрат,СообщениеОбОшибке = "")
//	
//	Если Не ЗначениеЗаполнено(СтатьяЗатрат) Тогда
//		Отказ = Истина;
//		фуОбщийКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
//	КонецЕсли;	
//	
//КонецПроцедуры

//Процедура ПроверитьСтатьюЗатрат(Отказ)
//	
//	ПроверкаСтатьиЗатрат(Отказ,ЭтотОбъект.СтатьяЗатрат,"Внимание! Не заполнена статья затрат. Проведние документа: "+ЭтотОбъект.Ссылка+" отменено.");
//	
//КонецПроцедуры

//Процедура ПроверитьСтатьюЗатратНаКомиссию(Отказ)
//	
//	ПроверкаСтатьиЗатрат(Отказ,ЭтотОбъект.СтатьяЗатратНаКомиссию, "Внимание! Не заполнена статья затрат на комиссию. Проведние документа: "+ЭтотОбъект.Ссылка+" отменено.");
//	
//КонецПроцедуры

//Процедура ПроверитьСтатьюЗатратНаДополнительныеРасходы(Отказ)
//	
//	ПроверкаСтатьиЗатрат(Отказ,ЭтотОбъект.СтатьяЗатратНаДополнительныеРасходы, "Внимание! Не заполнена статья затрат на дополнительные расходы. Проведние документа: "+ЭтотОбъект.Ссылка+" отменено.");
//	
//КонецПроцедуры

//Процедура ПроверкаВозможностиПроведенияДокумента(Отказ)
//	
//	// Проверка реквизитов документа:
//	Если Не ЗначениеЗаполнено(ЭтотОбъект.ВидОперации) Тогда
//		фуОбщийКлиентСервер.СообщитьПользователю("Внимание! Не заполнен вид операции. Проведние документа: "+ЭтотОбъект.Ссылка+" отменено.");
//		Отказ = Истина;
//	КонецЕсли;
//	
//	// Проверка по видам операций:
//	Если ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.ВнутрифирменныеРасчеты Тогда 	
//	
//		ПроверкаСчетовВДокументе(Отказ);	
//		
//	КонецЕсли;
//	
//	// Проверка заполнения статей затрат:
//	ПроверкаЗаполненияСтатейЗатрат(Отказ);

//КонецПроцедуры

//Процедура ПроверкаЗаполненияСтатейЗатрат(Отказ)
//	
//	// Сумма оплаты:
//	Если (ЭтотОбъект.ОплатаСумма <> 0) ИЛИ 
//		 (ЭтотОбъект.ОтгрузкаСумма <> 0) ИЛИ
//		 (ЭтотОбъект.СуммаПоступления <> 0) ИЛИ
//		 (ЭтотОбъект.СуммаПрихода <> 0) ИЛИ
//		 (ЭтотОбъект.СуммаРасхода <> 0) 
//	Тогда
//		ПроверитьСтатьюЗатрат(Отказ);
//	КонецЕсли;
//	
//	// Статья затрат на комиссию:
//	Если ЭтотОбъект.СуммаКомиссии <> 0 Тогда
//		ПроверитьСтатьюЗатратНаКомиссию(Отказ);
//	КонецЕсли;
//	
//	// Статья затрат на доп. расходы:
//	СуммаДопЗатрат = ЭтотОбъект.ОплатаДополнительныеРасходы;
//	Если СуммаДопЗатрат<>0 Тогда
//		ПроверитьСтатьюЗатратНаДополнительныеРасходы(Отказ);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ПриКопировании(ОбъектКопирования)
//	
//	ЭтотОбъект.Комментарий = "";
//    ЭтотОбъект.ИнвойсОплачен = Ложь;
//    ЭтотОбъект.ДатаОплатыИнвойса = Дата("00010101000000");
//    ЭтотОбъект.КомментарийПоОплате = "";
//	
//КонецПроцедуры

//Функция ДокументОтгрузкиПокупателям() Экспорт
//    
//    ДокументОтгрузки = Ложь;
//    
//    Если (ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.РасчетыСПокупателями) И
//         (ЭтотОбъект.ОтгрузкаСумма <> 0)        
//    Тогда
//        ДокументОтгрузки = Истина;    	
//    КонецЕсли; 
//    
//    Возврат ДокументОтгрузки; 
//    
//КонецФункции


//Процедура ЗаписьДвижений_фуВзаиморасчетыСКонтрагентами_Оплата(Отказ,КоллекцияДвижений)
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.РасчетыСПокупателями Тогда

//		Движение 				= КоллекцияДвижений.ДобавитьПриход();

//	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.РасчетыСПоставщиками Тогда

//		Движение 				= КоллекцияДвижений.ДобавитьРасход();

//	КонецЕсли;	

//	ЗаполнитьЗначенияСвойств(Движение,ЭтотОбъект);
//	Движение.Период = ЭтотОбъект.Дата;
//	Движение.Валюта	= ЭтотОбъект.РасчетныйСчет.ВалютаСчета;
//	Движение.Сумма	= ЭтотОбъект.ОплатаСумма;	 
//	
//	
//КонецПроцедуры

//Процедура ЗаписьДвижений_фуВзаиморасчетыСКонтрагентами_Отгрузка(Отказ,КоллекцияДвижений)
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.РасчетыСПокупателями Тогда
//		
//		Движение 				= КоллекцияДвижений.ДобавитьРасход();
//		
//	ИначеЕсли ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.РасчетыСПоставщиками Тогда
//		
//		Движение 				= КоллекцияДвижений.ДобавитьПриход();
//		
//	Иначе
//		Возврат;
//	КонецЕсли;	
//	
//	ЗаполнитьЗначенияСвойств(Движение,ЭтотОбъект);
//	Движение.Период = ЭтотОбъект.Дата;
//	Движение.Валюта	= ЭтотОбъект.РасчетныйСчет.ВалютаСчета;
//	Движение.Сумма	= ЭтотОбъект.ОтгрузкаСумма;	 
//	
//КонецПроцедуры

//Процедура ЗаписьДвижений_фуВзаиморасчетыСКонтрагентами(Отказ,РежимПроведения)
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Движения.фуВзаиморасчетыСКонтрагентами.Записывать = Истина;
//	
//	Если ЭтотОбъект.ВидОперации = Перечисления.фуВидыОпераций.ВнутрифирменныеРасчеты Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗаписьДвижений_фуВзаиморасчетыСКонтрагентами_Оплата(Отказ,Движения.фуВзаиморасчетыСКонтрагентами);
//	ЗаписьДвижений_фуВзаиморасчетыСКонтрагентами_Отгрузка(Отказ,Движения.фуВзаиморасчетыСКонтрагентами);
//	
//КонецПроцедуры

#КонецОбласти

