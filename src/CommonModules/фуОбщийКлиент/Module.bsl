
// Процедура - Открывает рабочий стол на клиенте, в зависимости от роли пользователя.
//
Процедура ОткрытьРабочийСтолНаКлиенте() Экспорт
    
    ОткрытьРабочийСтолБулево = Ложь;
    Если фуОбщийСервер.РольДоступнаНаСервере("фуСобственникКомпании") Тогда
        ОткрытьФорму("Обработка.фуРабочийСтолДляПользователей.Форма.Форма_СобственникКомпании");
    ИначеЕсли фуОбщийСервер.РольДоступнаНаСервере("фуСотрудникФинансовойСлужбы") Тогда     
        ОткрытьФорму("Обработка.фуРабочийСтолДляПользователей.Форма.Форма_СотрудникФинансовойСлужбы");
    ИначеЕсли фуОбщийСервер.РольДоступнаНаСервере("ПолныеПрава") Тогда     
        ОткрытьФорму("Обработка.фуРабочийСтолДляПользователей.Форма.Форма");
    КонецЕсли;
    
КонецПроцедуры

// Функция - Получить полное имя формы
//
// Параметры:
//  ИмяФормы - строка     - имя формы
// 
// Возвращаемое значение:
//   - строка 
//
Функция ПолучитьПолноеИмяФормы(ИмяФормы,ЭтаФорма) Экспорт
 
    СимволТчк = ".";
    
    ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
    
    Пока НЕ Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) = СимволТчк Цикл
    	
    	ПозицияТочки = ПозицияТочки - 1;
    	
    КонецЦикла; 
    
    Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
 
КонецФункции

// процедура, открывающая отчет/обработку по имени, заданному в допобработках
Процедура ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами(ИмяОтчетаОбработки, ПараметрыОткрытия, ЭтоОтчет, РодительскаяФорма = Неопределено) Экспорт
    ВнешнийОтчетОбработкаДляОткрытияСсылка = фуОбщийСервер.ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере(ИмяОтчетаОбработки);  
     // ВЫЗОВ ИЗ БСП ФУНКЦИИ ПОДКЛЮЧЕНИЯ ВНЕШНЕЙ ОБРАБОТКИ
    ИмяОбработкиСлужебное =ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешнийОтчетОбработкаДляОткрытияСсылка);
    Если ЭтоОтчет Тогда
        ОткрытьФорму("ВнешнийОтчет." + ИмяОбработкиСлужебное + ".Форма", ПараметрыОткрытия, РодительскаяФорма);
    Иначе
        ОткрытьФорму("ВнешняяОбработка." + ИмяОбработкиСлужебное + ".Форма", ПараметрыОткрытия, РодительскаяФорма);
    КонецЕсли;
КонецПроцедуры

// Процедура - Открыть форму скана документа на клиенте
//
// Параметры:
//  фмСканыДокументовСсылка     - ссылка  - ссылка на справочник фмСканыДокументовСсылка 
//
Процедура ОткрытьФормуСканаДокументаНаКлиенте(фмСканыДокументовСсылка) Экспорт
    
    Если ЗначениеЗаполнено(фмСканыДокументовСсылка) Тогда
        ПараметрыФормы = Новый Структура("Ключ", фмСканыДокументовСсылка);
        ОткрытьФорму("Справочник.фуСканыДокументов.Форма.ФормаЭлемента", ПараметрыФормы);
    КонецЕсли; 
        
КонецПроцедуры

// Вводит наименование месяца в реквизит объекта:
//
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, фуОбщийКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры 

// Открывает внутреннюю обработку по имени:
//
//		Параметры:
//			ИмяОбработки - Строка
Процедура ОткрытьВнутреннююОбработку(ИмяОбработки) Экспорт
	
	ПараметрыОткрытия = Новый Структура("КлючВарианта", "");
	Уникальность = "Обработка." + ИмяОбработки + "/КлючВарианта.";
	ОткрытьФорму("Обработка." + ИмяОбработки + ".Форма", , Неопределено, Уникальность);
	
КонецПроцедуры

// Открывает форму документа операция при разнесении выписки:
//
//	Парамтеры:
//		ДокументСсылка - ссылка, документ "Операция".
//
Процедура ОткрытьФормуРазнесениеВыписки(ДокументСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	П = Новый Структура;
    П.Вставить("Ключ", ДокументСсылка);

   ОткрытьФорму("Документ.фуОперация.Форма.ФормаРазнесенияВыписки", П);
	
КонецПроцедуры

// Процедура - Расчет комиссии при изменении суммы
//
// Параметры:
//  ТекущиеДанные     - строка табличной части - текущие данные строки табличной части
//  ДокументСсылка    - ссылка - ссылка на документ
//
Процедура РасчетКомиссииПриИзмененииСуммы(ТекущиеДанные,ДокументСсылка) Экспорт
	
	Если ТекущиеДанные <> Неопределено Тогда
		СтараяСумма = фуОбщийСервер.ПолучитьСтароеЗначениеПоляОплаты("Сумма",ТекущиеДанные.НомерСтроки,ДокументСсылка);
        Если СтараяСумма <> 0 Тогда
            // +++ Чесноков М.С. 2020-12-24 F1-29
            //ТекущиеДанные.Комиссия = ТекущиеДанные.Комиссия + ТекущиеДанные.Сумма - СтараяСумма;
            ТекущиеДанные.Комиссия = ТекущиеДанные.Сумма - СтараяСумма;            
            // --- Чесноков М.С. 2020-12-24 F1-29 
		КонецЕсли;
		Если ТекущиеДанные.Комиссия < 0 Тогда
			ТекущиеДанные.Комиссия = ТекущиеДанные.Комиссия * (-1);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасчетКомиссииПриИзмененииДополнительныеРасходы(ТекущиеДанные,ДокументСсылка) Экспорт
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ДополнительныеРасходы <> 0 Тогда
			СтараяДопРасходы = фуОбщийСервер.ПолучитьСтароеЗначениеПоляОплаты("ДополнительныеРасходы",ТекущиеДанные.НомерСтроки,ДокументСсылка);
			ТекущиеДанные.Комиссия = ТекущиеДанные.Комиссия - (ТекущиеДанные.ДополнительныеРасходы - СтараяДопРасходы);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры