								
// Функция - Получить дату из журнала регистрации
// 
// Возвращаемое значение:
//   -  дата
//
Функция ПолучитьДатуИзЖурналаРегистрации(ДатаСтрока) Экспорт
    
    ДатаСобытия = Дата("00010101000000");
    
    Попытка
        ДатаСобытия = СтрЗаменить(ДатаСтрока, "T", "");
        ДатаСобытия = СтрЗаменить(ДатаСобытия, ":", "");
        ДатаСобытия = Дата(СтрЗаменить(ДатаСобытия, "-", ""));
    Исключение
        СообщитьПользователю("Ошибка при конвертации строки в дату. Описание ошибки: "+ОписаниеОшибки()); 
    КонецПопытки;

    Возврат ДатаСобытия; 
    
КонецФункции //ПолучитьДатуИзЖурналаРегистрации
                                    
// Функция - Возвращает строку с признаком внешней обработки или обычной:
//
// Параметры:
//  ИмяФормы     - Строка     - Имя основной формы 
// 
// Возвращаемое значение:
//   - Строка 
//
Функция ВидОбработкиПоИмениФормыСтрока(ИмяФормы) Экспорт
    
    ВнешняяОбработкаСтрока = "Обработка";
    Если СтрНайти(НРег(ИмяФормы), НРег("ВнешняяОбработка")) > 0 Тогда
        ВнешняяОбработкаСтрока = "ВнешняяОбработка";    	    
    КонецЕсли; 
    
    Возврат ВнешняяОбработкаСтрока; 
    
КонецФункции

// Функция - Получить день недели прописью
//
// Параметры:
//  ПериодОтчета -  дата    - текущий месяц
//  ДеньМесяца     - число     - день месяца
// 
// Возвращаемое значение:
//   - строка 
//
Функция ПолучитьДеньНеделиПрописью(ПериодОтчета,ДеньМесяца) Экспорт
    
    ДеньНеделиЧисло = ДеньНедели(НачалоМесяца(ПериодОтчета) + ДеньМесяца*60*60*24);
    
    Возврат ДеньНеделиПрописью(ДеньНеделиЧисло);
    
КонецФункции

// Функция - Дни недели массив
//
// Параметры:
//  ПолноеНаименование     - булево     - полное наименование дней недели
// 
// Возвращаемое значение:
//   - Строка, день недели 
//
Функция ДниНеделиМассив(ПолноеНаименование = Ложь) Экспорт
    
    ДниНедели = Новый Массив;
    Если ПолноеНаименование Тогда
        
        ДниНедели.Добавить("Понедельник");
        ДниНедели.Добавить("Вторник");
        ДниНедели.Добавить("Среда");
        ДниНедели.Добавить("Четверг");
        ДниНедели.Добавить("Пятница");
        ДниНедели.Добавить("Суббота");
        ДниНедели.Добавить("Воскресенье");
        
    Иначе
        
        ДниНедели.Добавить("Пн");
        ДниНедели.Добавить("Вт");
        ДниНедели.Добавить("Ср");
        ДниНедели.Добавить("Чт");
        ДниНедели.Добавить("Пт");
        ДниНедели.Добавить("Сб");
        ДниНедели.Добавить("Вс");
        
    КонецЕсли; 

    Возврат ДниНедели;
    
КонецФункции

// Функция - День недели прописью
//
// Параметры:
//  ДН     -   число   - день недели
//  ПолноеНаименование     - булево     - полное наименование дней недели
// 
// Возвращаемое значение:
//   - строка 
//
Функция ДеньНеделиПрописью(ДН,ДниНеделиМассив = Неопределено, ПолноеНаименование = Ложь) Экспорт
    
    Если ДниНеделиМассив = Неопределено Тогда
    	ДниНеделиМассив = ДниНеделиМассив(ПолноеНаименование);
    КонецЕсли; 
    
    Возврат ДниНеделиМассив[ДН-1];
    
КонецФункции

// Функция - Преобразовать текущую строку в дату
//
// Параметры:
//  стрДата     - строка     - дата
// 
// Возвращаемое значение:
//   - дата 
//
Функция ПреобразоватьТекущуюСтрокуВДату(стрДата) Экспорт
	
	дДата = Дата("00010101000000");

    стрДата = СтрЗаменить(стрДата,"-","");
    стрДата = СокрЛП(стрДата);
    
    СтрокаМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стрДата, " ");

    Если СтрокаМассив.Количество() = 1 Тогда
        
        ДатаСтрока = СтрокаМассив[0];
        стрДата = ДатаСтрока + " 00:00:00";    
        
    ИначеЕсли СтрокаМассив.Количество() > 1 Тогда     
        
        ДатаСтрока = СтрокаМассив[0];
        ВремяСтрока = СтрокаМассив[1];
        
        Если СтрДлина(ВремяСтрока) <=5  Тогда
        	ВремяСтрока = ВремяСтрока+":00";
        КонецЕсли; 
        
        стрДата = ДатаСтрока + " " + ВремяСтрока;
        
    КонецЕсли; 
    
    Попытка
    	дДата = Дата(стрДата);
    Исключение
        дДата = Дата("00010101000000");
    КонецПопытки; 
    
	Если дДата = Дата("00010101000000") Тогда
        
        Если дДата <> "" Тогда
    		ЗначениеДата = Лев(стрДата, 10);
    		ЗначениеВремя = Сред(стрДата, 14, 5) + ":00"; 
    		ЗначениеВремя = СтрЗаменить(ЗначениеВремя,":","");
    		Если СтрДлина(ЗначениеВремя) = 5 Тогда
    			ЗначениеВремя = "0" + ЗначениеВремя; 
    		КонецЕсли;
            
    		дДата = Дата(Прав(ЗначениеДата, 4) + Сред(ЗначениеДата, 4, 2) + Лев(ЗначениеДата, 2)+ЗначениеВремя);
        	
        КонецЕсли; 
		
	КонецЕсли;	
		
	Возврат дДата;	
	
КонецФункции

// Проверка наличия реквезита в объекте:
Функция ЕстьСвойство(Объект, ИмяСвойства) Экспорт
	
	РезультатФункции = Ложь;
    НачальноеЗНачение = Новый УникальныйИдентификатор();
    ЗначениеРеквизита = Новый Структура(ИмяСвойства, НачальноеЗНачение);
	
	ЗаполнитьЗначенияСвойств(ЗначениеРеквизита, Объект);
    Если ЗначениеРеквизита[ИмяСвойства] <> НачальноеЗНачение Тогда
        РезультатФункции = Истина;
    КонецЕсли;
    Возврат РезультатФункции;
	
КонецФункции

// Выводит сообщение пользователю:
Процедура СообщитьПользователю(Текст, стрДляЗаписиВРегистр = Неопределено, ОбъектДанных = Неопределено, Поле = "") Экспорт

	Текст = Строка(ТекущаяДата())+ ": " + Текст;
	
	Если ОбъектДанных = Неопределено Тогда
		
		Сообщить(Текст);
		
	Иначе 
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = Текст;
		Сообщение.УстановитьДанные(ОбъектДанных);
		Сообщение.Поле = Поле;
		Сообщение.Сообщить();			

	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку заполненности валюты счета:
Функция ПроверкаЗаполненияВалютыСчета(ВалютаСчета) Экспорт
	
	булПроверка = Истина;
	
	Если Не ЗначениеЗаполнено(ВалютаСчета) Тогда
		
		булПроверка = Ложь;
		
	КонецЕсли;

	Возврат булПроверка;
	
КонецФункции

// Выводит сообщение о не заданной валюте счета по заданной строке
Процедура ВывестиСообщениеОНеЗаполненнойВалютеСчета(РасчетныйСчет, ТекущиеДанные = Неопределено,Объект = Неопределено, НаименованиеТабличнойЧасти = "") Экспорт
	
	стрОшибки = "";
	стрОшибки = стрОшибки + "Внимание! ";
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		стрОшибки = стрОшибки + "В документе: "+Объект.Ссылка+"; ";
	КонецЕсли;
	Если ЗначениеЗаполнено(НаименованиеТабличнойЧасти) Тогда
		стрОшибки = стрОшибки + "В табличной части: "+НаименованиеТабличнойЧасти+"; ";
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
		стрОшибки = стрОшибки + "В строке: "+ТекущиеДанные.НомерСтроки+"; ";
	КонецЕсли;
	Если ЗначениеЗаполнено(РасчетныйСчет) Тогда
		стрОшибки = стрОшибки + "В расчетном счете: "+РасчетныйСчет.Ссылка+", не задана валюта счета.";
	КонецЕсли;
	
	фуОбщийКлиентСервер.СообщитьПользователю(стрОшибки);

КонецПроцедуры
	
Функция ИмяОтчетаПоИмениФормы(Форма) Экспорт
  
  ЭлементыИмени = СтрРазделить(Форма.ИмяФормы, ".");
  Если ЭлементыИмени.Количество() > 1 И ЭлементыИмени[0] = "Отчет" Тогда
    Возврат ЭлементыИмени[1];
  Иначе
    Возврат Неопределено;
  КонецЕсли;
  
КонецФункции

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции
