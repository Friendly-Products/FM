
// Функция - Получить справочник по наименованию
//
// Параметры:
//  НаименованиеСправочника	 - Строка	 - Наименование справочника
//  ИмяСправочинка			 - Строка	 - Имя справочника (Метаданные)
// 
// Возвращаемое значение:
//   - Ссылка на справочник
//
Функция ПолучитьСправочникПоНаименованию(ИмяСправочинка,НаименованиеСправочника) Экспорт
	
	СправочникСсылка = Справочники[ИмяСправочинка].НайтиПоНаименованию(НаименованиеСправочника);
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		СправочникОбъект = Справочники[ИмяСправочинка].СоздатьЭлемент();
		СправочникОбъект.Наименование = НаименованиеСправочника;
		
		Попытка
			СправочникОбъект.Записать();	
			СправочникСсылка = СправочникОбъект.Ссылка;			
		Исключение
		    Сообщить("Ошибка при записи справочника: "+ИмяСправочинка
			        +". Наименование: "+ НаименованиеСправочника
					+". Описание ошибки: "+ОписаниеОшибки());
			СправочникСсылка = Справочники[ИмяСправочинка].ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;                                 
	
	Возврат СправочникСсылка;
	
КонецФункции                                                                   						

// +++ Чесноков М.С. 2021-10-25 F1-133
//
// Параметры:
//  КонтактнаяИнформация - табличная часть - контактная информация объекта 
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьАдресЭлектроннойПочты(КонтактнаяИнформация) Экспорт

	АдресЭлПочты = "";
	
	Для каждого КонтактнаяИнформацияСтрока Из КонтактнаяИнформация Цикл
		
		Если КонтактнаяИнформацияСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя Тогда
			АдресЭлПочты = КонтактнаяИнформацияСтрока.АдресЭП;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат АдресЭлПочты; 
	
КонецФункции
// --- Чесноков М.С. 2021-10-25 F1-133 

// Функция - Это внешняя обработка отчет
// 
// Возвращаемое значение:
//   - булево
//
Функция ЭтоВнешняяОбработкаОтчет(ЭтотОбъект) Экспорт
    ПолноеИмяМетаданных = ЭтотОбъект.Метаданные().ПолноеИмя();
    Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных) = Неопределено
КонецФункции

// Функция - Задать статью затрат на комиссию 
//
// Параметры:
//  ДокументОбъект     - объект - документ объект для правки комиссии
//  ИсходныеДанные     - структура - данные для загрузки значений статьи затра на комиссию 
//                       см. функцию ЗадатьСтатьюЗатратНаКомиссию_ИсходныеДанные
// 
// Возвращаемое значение:
//   - 
//
Функция ЗадатьСтатьюЗатратНаКомиссию(ДокументОбъект) Экспорт

    СтатьяЗатратНаКомиссию = Справочники.фуСтатьиЗатрат.КомиссияПоУмолчанию;
    
    Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.фуОперация") Тогда
                                                             
        Если      ДокументОбъект.СтатьяЗатрат = Справочники.фуСтатьиЗатрат.ОплатаТрудаПерсонала Тогда
        	СтатьяЗатратНаКомиссию = Справочники.фуСтатьиЗатрат.КомиссииПриВыплатеЗарплаты;
        ИначеЕсли ДокументОбъект.СтатьяЗатрат = Справочники.фуСтатьиЗатрат.ВнутрифирменныеРасчеты Тогда 
            СтатьяЗатратНаКомиссию = Справочники.фуСтатьиЗатрат.КомиссииПоВнутрифирменнымРасчетам;
        КонецЕсли; 
        
    КонецЕсли; 
    
    Возврат СтатьяЗатратНаКомиссию; 
    
КонецФункции

// Процедура - Проверяет наличие детей у справочника:
//
// Параметры:
//  СправочникСсылка - ссылка родителя 
//
Функция ЕстьДетиУСправочника(Ссылка,ИмяСправочника) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   фуСтруктураОтчётаОПУ.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.фуСтруктураОтчётаОПУ КАК фуСтруктураОтчётаОПУ
        |ГДЕ
        |   фуСтруктураОтчётаОПУ.Родитель = &Родитель";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст,"фуСтруктураОтчётаОПУ",ИмяСправочника);
    Запрос.УстановитьПараметр("Родитель", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать().Количество();

    Возврат ВыборкаДетальныеЗаписи > 0; 
    
КонецФункции

// Процедура - Устанавливает группу у родителей справочника:
//
// Параметры:
//  СправочникСсылка - ссылка родителя 
//
Процедура УстановитьЭтоГруппаУРодителей(СправочникСсылка) Экспорт
    
    Если ЗначениеЗаполнено(СправочникСсылка) Тогда
        СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
        СправочникОбъект.ЭтоГруппаЗаголовок = Истина;
        СправочникОбъект.Записать();
    КонецЕсли;                                         
    
КонецПроцедуры

// Функция - Получить всех действующих пользователей
// 
// Возвращаемое значение:
//   - таблица значений - все пользователи системы.
//
Функция ПолучитьВсехПользователей() Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Пользователи.Ссылка КАК Пользователь
        |ИЗ
        |   Справочник.Пользователи КАК Пользователи
        |ГДЕ
        |   НЕ Пользователи.ПометкаУдаления
        |   И НЕ Пользователи.Недействителен";
    
    тз = Запрос.Выполнить().Выгрузить();
    
    Возврат тз;
    
КонецФункции
 
// Процедура - Установить доступоность реквизитов на форме
//
// Параметры:
//  Элементы - элементы формы
//
Процедура УстановитьДоступоностьРеквизитовНаФорме(Элементы, ОбъектСсылка = Неопределено) Экспорт
	
	// +++ Чесноков М.С. 2021-10-25 F1-133
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.фуПриемНаРаботу") Тогда
		Элементы.СтатусДокумента.Доступность = (РольДоступна("фуСменаСтатусаДокумента") ИЛИ РольДоступна("ПолныеПрава"));
	КонецЕсли;
	// --- Чесноков М.С. 2021-10-25 F1-133 
	
	// +++ Чесноков М.С. 2021-08-27 F1-117
	Если РольДоступна("фуСотрудникСлужбыПерсонала") Тогда
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.фуСотрудники") Тогда
			Элементы.СканыДокументовСотрудника.Видимость	= Ложь; 
		КонецЕсли; 
	КонецЕсли;
	// --- Чесноков М.С. 2021-08-27 F1-117
	
	// +++ Чесноков М.С. 2021-08-27 F1-117
	фуКадровыйУчетСервер.НастроитьВидимостьОкладовНаФорме(Элементы, ОбъектСсылка);	
	// --- Чесноков М.С. 2021-08-27 F1-117
	   	
КонецПроцедуры

// Функция - Преобразовать текст ВТЗНа сервере
//
// Параметры:
//  Отказ                     - булево  - Признак отказа
//  Текст                     - файл    - Текстовый файл
//  Разделитель               - строка  - Строка разделитель в тексте
//  ЕстьЗакрывающийСимвол     - булево  - Наличие закрывающего символа
// 
// Возвращаемое значение:
//   - таблица значений
//
Функция ПреобразоватьТекстВТЗНаСервере(Отказ,Текст,Разделитель=";",ЕстьЗакрывающийСимвол=Ложь) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Попытка 
		
		МаксимальноеКвоРазделителей = 0;
		Для НомерСтроки=1 по Текст.КоличествоСтрок() Цикл
			Стр = Текст.ПолучитьСтроку(НомерСтроки);
			КвоРазделителей = СтрЧислоВхождений(Стр,Разделитель);
			Если  КвоРазделителей > МаксимальноеКвоРазделителей Тогда
		          МаксимальноеКвоРазделителей = КвоРазделителей;
			КонецЕсли;	  
		КонецЦикла;	
		
		КвоКолонок = ?(ЕстьЗакрывающийСимвол = Истина,МаксимальноеКвоРазделителей,МаксимальноеКвоРазделителей+1);
		Ном = 0;
		Пока Ном < КвоКолонок Цикл
			 Ном = Ном+1;
			 ИмяКолонки = "N"+Ном;
			 ТаблицаЗначений.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		
		ТаблицаЗначений.Колонки.Добавить("НомерСтроки");
		
		Для НомерСтроки=1 по Текст.КоличествоСтрок() Цикл
			
			Стр = Текст.ПолучитьСтроку(НомерСтроки);
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			
			Ном = 0;
			Пока Найти(Стр,Разделитель) > 0 Цикл
				Ном = Ном+1;
				ПозицияРазделителя = Найти(Стр,Разделитель);
				//получим значение
				ТекЗначение = ЛЕВ(Стр,ПозицияРазделителя - 1);
				Стр = Прав(Стр,СтрДлина(Стр) - ПозицияРазделителя);
				
				//теперь запишем значения
				ИмяКолонки = "N"+Ном;
				НоваяСтрока[ИмяКолонки] = ПреобразоватьСтрокуПередЗагрузкой(ТекЗначение);
			КонецЦикла;
			
			Если ЕстьЗакрывающийСимвол = Ложь Тогда
				ИмяКолонки = "N"+(Ном+1);
				НоваяСтрока[ИмяКолонки] = ПреобразоватьСтрокуПередЗагрузкой(Стр);
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение	
		
		фуОбщийКлиентСервер.СообщитьПользователю("Ошибка при загрузке данных в таблицу значений. Описание: "+ОписаниеОшибки());
		Отказ = Истина;
		
	КонецПопытки;
	
	Возврат  ТаблицаЗначений;
	
КонецФункции

// Функция - Преобразовать строку перед загрузкой (см. функцию ПреобразоватьТекстВТЗНаСервере)
//
// Параметры:
//  стр     - строка     - строка для преобразования.
// 
// Возвращаемое значение:
//   -  преобразованная строка
//
Функция ПреобразоватьСтрокуПередЗагрузкой(стр)
	
	// Убираем кавычки крайние слева и справа, если они есть:
	стрТекущая = стр;
	Если Лев(стрТекущая,1) = """" Тогда
		стрТекущая = Прав(стрТекущая,СтрДлина(стрТекущая)-1);
	КонецЕсли;
	
	Если Прав(стрТекущая,1) = """" Тогда
		стрТекущая = Лев(стрТекущая,СтрДлина(стрТекущая)-1);
	КонецЕсли;
	
	// Убираем двойные кавычи:
	стрТекущая = СтрЗаменить(стрТекущая,"""""","""");
	
	Возврат стрТекущая;
	
КонецФункции

// Функция - Получить ссылку на внешний отчет обработку по имени на сервере
//
// Параметры:
//  ИмяОтчетаОбработки     - строка     - имя отчета или обработки
// 
// Возвращаемое значение:
//   - ссылка на справочник ДополнительныеОтчетыИОбработки
//
Функция ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере(ИмяОтчетаОбработки) Экспорт
    Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОтчетаОбработки).Ссылка;
КонецФункции

// Функция - Получить объект скана по ссылке
//
// Параметры:
//  СканДокументаСсылка     - ссылка  - ссылка на справочник фуСканыДокументов
//  ОбъектСсылка            - ссылка  - объект из которого идет запись
//  Сотрудник               - ссылка  - ссылка справочник фуСотрудники
//  ПутьФайла               - строка  - путь к файлу с картинкой
// 
// Возвращаемое значение:
//   - объект - элемент справочника фуСканыДокументов 
//
Функция ПолучитьОбъектСканаПоСсылке(СканДокументаСсылка,ОбъектСсылка,Сотрудник,СканДата,ПутьФайла) Экспорт
    
    Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
        Сообщить(НСтр("ru = 'Для записи скана сохраните документ.';"
                + " es = 'Para grabar el escaneo, guarde el documento.'"));
        Возврат Неопределено;	
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Сотрудник) Тогда
        Сообщить(НСтр("ru = 'Для записи скана укажите подотчетное лицо (сотрудник).';"
        + " es = 'Para grabar el escaneo, especifique una persona responsable.'"));
        Возврат Неопределено;	
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(СканДата) Тогда
    	СканДата = ТекущаяДата();
    КонецЕсли; 
    
    СоздатьНовыйСправочник = Ложь;
    Если ЗначениеЗаполнено(СканДокументаСсылка) Тогда
        
        СканДокументаОбъект = СканДокументаСсылка.ПолучитьОбъект();
        Если СканДокументаОбъект = Неопределено  Тогда
        	СоздатьНовыйСправочник = Истина;
        КонецЕсли; 

    Иначе
        СоздатьНовыйСправочник = Истина;
    КонецЕсли; 
    
    Если СоздатьНовыйСправочник Тогда
        СканДокументаОбъект = Справочники.фуСканыДокументов.СоздатьЭлемент();
        СканДокументаОбъект.Наименование = "Документ: "+ОбъектСсылка+" "+
                                           "Сотрудник: "+Сотрудник;
    КонецЕсли;             

    СканДокументаОбъект.Источник  = ОбъектСсылка;
    СканДокументаОбъект.Сотрудник = Сотрудник;
    СканДокументаОбъект.СканДата  = СканДата;
    СканДокументаОбъект.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПутьФайла));
    СканДокументаОбъект.Записать();
    
    Возврат СканДокументаОбъект; 
    
КонецФункции    

// Функция - Удалить скан документа на сервере
//
// Параметры:
//  СканДокументаСсылка     - ссылка     - ссылка на справочник фуСканыДокументов
// 
// Возвращаемое значение:
//   - булево
//
Функция УдалитьСканДокументаНаСервере(СканДокументаСсылка) Экспорт
    
    ДокументУдален = Ложь;
    
    Попытка
        
        Если ЗначениеЗаполнено(СканДокументаСсылка) Тогда
            
            УстановитьПривилегированныйРежим(Истина);
            СканДокументаОбъект = СканДокументаСсылка.ПолучитьОбъект(); 
            СканДокументаОбъект.ПометкаУдаления = Истина;
            СканДокументаОбъект.Записать();
            УстановитьПривилегированныйРежим(Ложь);
            
        КонецЕсли; 
    
        ДокументУдален = Истина;
        
    Исключение
        Сообщить("Ошибка при удалении скана документа. Описание: "+ОписаниеОшибки());
    КонецПопытки; 
    
    Возврат ДокументУдален;
    
КонецФункции

// Процедура - Запись справочника сотрудник. Нужна для того, чтобы в списке сотрудников были актуальные
//             данные для отображения. 
//
// Параметры:
//  Отказ             - булево  - Отказ при записи объекта
//  Режим             - режим записи документа - режим записи
//  ДокументОбъект    - объект - Документ объект
//
Процедура ЗаписьСправочника_Сотрудник(Отказ,Режим,ДокументОбъект) Экспорт
    
    Если Отказ Тогда
    	Возврат;
    КонецЕсли; 
    
    Если Не фуОбщийКлиентСервер.ЕстьСвойство(ДокументОбъект,"Сотрудник") Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьПривилегированныйРежим(Истина);
    СотрудникОбъект = ДокументОбъект.Сотрудник.ПолучитьОбъект();
                                                                           
	ДанныеПоСотруднику = фуКадровыйУчетСервер.ПолучитьКадровыеДанныеСотрудника(ДокументОбъект.Сотрудник); 
    ЗаполнитьЗначенияСвойств(СотрудникОбъект,ДанныеПоСотруднику);

    СотрудникОбъект.Записать();
    УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры   

// Записывает в объект, значение реквизита.
//
//	Параметры:
//		Источник - объект. Объект в который записывается значение.
//		ИмяРеквизита - строка. Имя реквизита.
//		ЗначениеРеквизита - ссылка. Значение реквизита.
Процедура ЗаписатьРеквизитВОбъект(Источник,ИмяРеквизита,ЗначениеРеквизита) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
    КонецЕсли;
    
    Если фуОбщийКлиентСервер.ЕстьСвойство(Источник,"ЭтоГруппа") Тогда
        Если Источник.ЭтоГруппа Тогда
            Возврат;	
        КонецЕсли; 
    КонецЕсли;
    
	Если фуОбщийКлиентСервер.ЕстьСвойство(Источник,ИмяРеквизита) Тогда
		Если Не ЗначениеЗаполнено(Источник[ИмяРеквизита]) Тогда 
			Источник[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры         

// Функция получает ветви дерева по входящему элементу в справочнике.
//
//	Параметры:
//		ЭлементСсылка - ссылка, элемент справочника.		
//		ИмяСправочника - имя справочника.
Функция ПолучитьВетвиДереваПоВходящемуЭлементу(ЭлементСсылка,ИмяСправочника) Экспорт
	
	СтатьиЗатратМассив = Новый Массив;
	ПолучитьВетвиДеререваВМассив(ЭлементСсылка, ИмяСправочника, СтатьиЗатратМассив);
	
	Возврат СтатьиЗатратМассив; 
	
КонецФункции

// Рекурсивная процедура получающая ветви дерева в массив.
//
//	Параметры: 
//		ЭлементСсылка - ссылка, элемент справочника.
//		ИмяСправочника - строка, имя справочника.
// 		СтатьиЗатратМассив - массив, статьи затрат ссылки.
Процедура ПолучитьВетвиДеререваВМассив(ЭлементСсылка, ИмяСправочника, СтатьиЗатратМассив)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	фуСтруктураОтчётаОПУ.Ссылка КАК Ссылка,
		|	фуСтруктураОтчётаОПУ.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	Справочник.фуСтруктураОтчётаОПУ КАК фуСтруктураОтчётаОПУ
		|ГДЕ
		|	фуСтруктураОтчётаОПУ.Родитель = &Родитель
		|	И НЕ фуСтруктураОтчётаОПУ.ПометкаУдаления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"фуСтруктураОтчётаОПУ",ИмяСправочника);
	
	Запрос.УстановитьПараметр("Родитель", ЭлементСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтатьиЗатратМассив.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		ПолучитьВетвиДеререваВМассив(ВыборкаДетальныеЗаписи.Ссылка, ИмяСправочника, СтатьиЗатратМассив);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Получить корень дерева по статье затрат.
//
// Параметры:
//  ЭлементСсылка     - ссылка - элемент справочника
//  ИмяСправочника    - строка - имя справочника для обхода значений
//  КореньДерева      - ссылка - корень справочника в котором идет обход
//
Процедура ПолучитьКореньДереваПоСтатьеЗатрат(ЭлементСсылка, ИмяСправочника, КореньДерева) Экспорт
    
    Если Не ЗначениеЗаполнено(ЭлементСсылка.Родитель) Тогда
        КореньДерева = ЭлементСсылка;	
        Возврат;
    Иначе
        
     	Запрос = Новый Запрос;
    	Запрос.Текст = 
    		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |   фуСтруктураОтчётаОПУ.Ссылка КАК Ссылка,
            |   фуСтруктураОтчётаОПУ.СтатьяЗатрат КАК СтатьяЗатрат
            |ИЗ
            |   Справочник.фуСтруктураОтчётаОПУ КАК фуСтруктураОтчётаОПУ
            |ГДЕ
            |   фуСтруктураОтчётаОПУ.Ссылка = &Родитель
            |   И НЕ фуСтруктураОтчётаОПУ.ПометкаУдаления";
    	
    	Запрос.Текст = СтрЗаменить(Запрос.Текст,"фуСтруктураОтчётаОПУ",ИмяСправочника);
    	Запрос.УстановитьПараметр("Родитель", ЭлементСсылка.Родитель);
    	
    	РезультатЗапроса = Запрос.Выполнить();
    	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    		
            ПолучитьКореньДереваПоСтатьеЗатрат(ВыборкаДетальныеЗаписи.Ссылка, ИмяСправочника, КореньДерева);
            Прервать;
            
    	КонецЦикла;
        
   КонецЕсли;     
    
КонецПроцедуры

Функция РольДоступнаНаСервере(ИмяРоли) Экспорт
	
	РольДоступнаБулево = Ложь;
	Если РольДоступна(ИмяРоли) Тогда
		РольДоступнаБулево = Истина;
	КонецЕсли;
	
	Возврат РольДоступнаБулево;
	
КонецФункции

Функция ПолучитьСтароеЗначениеПоляОплаты(ИмяПоля,НомерСтроки,ДокументСсылка) Экспорт
	
	Если ДокументСсылка.Оплата.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ДокументСсылка.Оплата[НомерСтроки-1][ИмяПоля]; 
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОборотыПоДДС(ПараметрыЗапроса) Экспорт
	
	Запрос = Новый Запрос;
    
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(фуДвиженияДенежныхСредствОбороты.Период, ДЕНЬ), &Дата1) КАК Период,
	//	|	ЕСТЬNULL(фуДвиженияДенежныхСредствОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.фуОперация.ПустаяСсылка)) КАК Регистратор,
	//	|	фуСтруктураОтчётаДДС.Ссылка КАК ГруппаДДС,
	//	|	ЕСТЬNULL(фуДвиженияДенежныхСредствОбороты.СтатьяЗатрат, ЗНАЧЕНИЕ(Справочник.фуСтатьиЗатрат.ПустаяСсылка)) КАК СтатьяДДС,
	//	|	ЕСТЬNULL(фуДвиженияДенежныхСредствОбороты.СуммаОборот, 0) КАК СуммаОборот,
	//	|	ЕСТЬNULL(фуДвиженияДенежныхСредствОбороты.Регистратор.Комментарий, """") КАК Комментарий,
	//	|	фуДвиженияДенежныхСредствОбороты.Регистратор.Контрагент КАК РегистраторКонтрагент
	//	|ИЗ
	//	|	Справочник.фуСтруктураОтчётаДДС КАК фуСтруктураОтчётаДДС
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.фуДвиженияДенежныхСредств.Обороты(&Дата1, &Дата2, Регистратор, ) КАК фуДвиженияДенежныхСредствОбороты
	//	|		ПО (фуДвиженияДенежныхСредствОбороты.СтатьяЗатрат = фуСтруктураОтчётаДДС.СтатьяЗатрат)
	//	|ГДЕ
	//	|	НЕ фуСтруктураОтчётаДДС.ЭтоГруппаЗаголовок
	//	|	И НЕ фуСтруктураОтчётаДДС.ПометкаУдаления
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Период";    
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(фуДвиженияДенежныхСредствОбороты.Период, ДЕНЬ) КАК Период,
		|	фуСтруктураОтчётаДДС.Родитель КАК СтруктураДДССтатьяЗатратРодитель,
		|	фуСтруктураОтчётаДДС.Ссылка КАК СтруктураДДССтатьяЗатрат,
		|	фуДвиженияДенежныхСредствОбороты.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета,
		|	фуДвиженияДенежныхСредствОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
		|	фуДвиженияДенежныхСредствОбороты.СуммаОборот КАК СуммаОборот,
		|	фуДвиженияДенежныхСредствОбороты.Регистратор.Комментарий КАК Комментарий,
		|	фуДвиженияДенежныхСредствОбороты.Регистратор КАК Регистратор,
		|	фуДвиженияДенежныхСредствОбороты.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.фуДвиженияДенежныхСредств.Обороты(&Дата1, &Дата2, Регистратор, СтатьяЗатрат В (&СтатьиЗатратМассив)) КАК фуДвиженияДенежныхСредствОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фуСтруктураОтчётаДДС КАК фуСтруктураОтчётаДДС
		|		ПО фуДвиженияДенежныхСредствОбороты.СтатьяЗатрат = фуСтруктураОтчётаДДС.СтатьяЗатрат
		|ГДЕ
		|	НЕ фуСтруктураОтчётаДДС.ЭтоГруппаЗаголовок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";

	Если ЗначениеЗаполнено(ПараметрыЗапроса.Периодичность) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", ДЕНЬ",", "+ПараметрыЗапроса.Периодичность);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Дата1", ПараметрыЗапроса.Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", ПараметрыЗапроса.Период.ДатаОкончания);
	
	Если НЕ ПараметрыЗапроса.Свойство("СтатьиЗатратМассив") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СтатьяЗатрат В (&СтатьиЗатратМассив)","Истина");	

	Иначе
		
		Запрос.УстановитьПараметр("СтатьиЗатратМассив", ПараметрыЗапроса.СтатьиЗатратМассив);
		
	КонецЕсли;

	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Период");

	Возврат тз;
	
КонецФункции

Функция ПолучитьОборотыПоПиУ(ПараметрыЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(фуДоходыИРасходыОбороты.Период, ДЕНЬ) КАК Период,
		|	фуСтруктураОтчётаОПУ.Родитель КАК СтруктураОПУСтатьяЗатратРодитель,
		|	фуСтруктураОтчётаОПУ.Ссылка КАК СтруктураОПУСтатьяЗатрат,
		|	фуДоходыИРасходыОбороты.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета,
		|	фуДоходыИРасходыОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
		|	фуДоходыИРасходыОбороты.СуммаОборот КАК СуммаОборот,
		|	фуДоходыИРасходыОбороты.Регистратор.Комментарий КАК Комментарий,
		|	фуДоходыИРасходыОбороты.Регистратор КАК Регистратор,
		|	фуДоходыИРасходыОбороты.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.фуДоходыИРасходы.Обороты(&Дата1, &Дата2, Регистратор, СтатьяЗатрат В (&СтатьиЗатратМассив)) КАК фуДоходыИРасходыОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фуСтруктураОтчётаОПУ КАК фуСтруктураОтчётаОПУ
		|		ПО фуДоходыИРасходыОбороты.СтатьяЗатрат = фуСтруктураОтчётаОПУ.СтатьяЗатрат
		|ГДЕ
		|	НЕ фуСтруктураОтчётаОПУ.ЭтоГруппаЗаголовок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
    
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Периодичность) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,", ДЕНЬ",", "+ПараметрыЗапроса.Периодичность);
    КонецЕсли;
    
	Запрос.УстановитьПараметр("Дата1", ПараметрыЗапроса.Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", ПараметрыЗапроса.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ЭтоОтчетОПУ", ПараметрыЗапроса.ЭтоОтчетОПУ);
	
	Если НЕ ПараметрыЗапроса.Свойство("СтатьиЗатратМассив") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СтатьяЗатрат В (&СтатьиЗатратМассив)","Истина");	

	Иначе
		
		Запрос.УстановитьПараметр("СтатьиЗатратМассив", ПараметрыЗапроса.СтатьиЗатратМассив);
		
	КонецЕсли;
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Период");

	Возврат тз;
	
КонецФункции

// Добавляет признак нового в дополнительные свойства объекта.
Процедура ДобавитьПризнакЭтоНовый(Источник) Экспорт
	
	Источник.ДополнительныеСвойства.Вставить("фуЭтоНовый",Источник.ЭтоНовый());
	
КонецПроцедуры

// Возвращает таблицу значений исходя из периода и переодичности:
//
//	Параметры:	
//		дДата1 - дата, начало периода
//		дДата2 - дата, конец периода
//		стрПериодичность - строка, содержит вид периодичности (День, Неделя, Месяц и др).
Функция ПолучитьПериоды(ПараметрыСтруктура) Экспорт
	
	тзИнтервалов = Новый ТаблицаЗначений;
    тзИнтервалов.Колонки.Добавить("Дата1", Новый ОписаниеТипов("Дата"));
    тзИнтервалов.Колонки.Добавить("Дата2", Новый ОписаниеТипов("Дата"));

	Если Не ЗначениеЗаполнено(ПараметрыСтруктура.Периодичность) Тогда
		
		НоваяСтрока = тзИнтервалов.Добавить();
		НоваяСтрока.Дата1 = ПараметрыСтруктура.Период.ДатаНачала;
		НоваяСтрока.Дата2 = ПараметрыСтруктура.Период.ДатаОкончания;	
		
	Иначе
		
	    Запрос = Новый Запрос;
	    Запрос.Текст = "ВЫБРАТЬ 
	    |   НАЧАЛОПЕРИОДА(&НачДата, День) КАК НачИнтервала
	    |УПОРЯДОЧИТЬ ПО
	    |   НачИнтервала
	    |ИТОГИ ПО
	    |   НачИнтервала ПЕРИОДАМИ("+ПараметрыСтруктура.Периодичность+", &НачДата, &КонДата)";
		
		//Параметры запроса
	    Запрос.УстановитьПараметр("НачДата", ПараметрыСтруктура.Период.ДатаНачала);
	    Запрос.УстановитьПараметр("КонДата", ПараметрыСтруктура.Период.ДатаОкончания);

	    Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НачИнтервала", "ВСЕ");
	    Пока Выборка.Следующий() Цикл
	        НоваяСтрока = тзИнтервалов.Добавить();
	        НоваяСтрока.Дата1 = Выборка.НачИнтервала;
	    КонецЦикла;

		чКоличествоСтрок = тзИнтервалов.Количество();
		
		Если чКоличествоСтрок = 1 Тогда
			тзИнтервалов[0].Дата2 = ПараметрыСтруктура.Период.ДатаОкончания; 
		Иначе
			
			Для чИндекс = 0 По чКоличествоСтрок - 2 Цикл
				тзИнтервалов[чИндекс].Дата2 = тзИнтервалов[чИндекс+1].Дата1-1; 
			КонецЦикла;
			
			тзИнтервалов[чКоличествоСтрок - 1].Дата2 = ПараметрыСтруктура.Период.ДатаОкончания;
			Если тзИнтервалов[чКоличествоСтрок - 1].Дата1 = тзИнтервалов[чКоличествоСтрок - 1].Дата2 Тогда
				тзИнтервалов.Удалить(чКоличествоСтрок-1);
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;
	
    Возврат  тзИнтервалов;
	
КонецФункции

// Удаляет дубли из массива источника:
// Параметры:
//  МассивПриемник – Массив – массив, который заполняется уникальными значениями
//  МассивИсточник – Массив – массив, из которого подбираются элементы в массив-приемник.
// 
Функция УдалитьДублиИзМассива(МассивИсточник) Экспорт
	
	МассивПриемник = Новый Массив; 
	
    Для Каждого Элемент Из МассивИсточник Цикл
		
		Если МассивПриемник.Найти(Элемент) = Неопределено Тогда
            МассивПриемник.Добавить(Элемент);
        КонецЕсли;
        
    КонецЦикла;
	
	Возврат МассивПриемник; 
	
КонецФункции

Функция ИмяОтчета(Форма) Экспорт
  
  ИмяОтчета = фуОбщийКлиентСервер.ИмяОтчетаПоИмениФормы(Форма);
  Если ИмяОтчета <> Неопределено Тогда
    Возврат ИмяОтчета;
  КонецЕсли;
  
  // Основной реквизит формы должен называться Отчет
  ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
  Возврат ОтчетОбъект.Метаданные().Имя;
  
КонецФункции

// Возвращает реквизиты для заполнения документа:
Функция ПолучитьСтруктуруЗаполненияДокумента() Экспорт
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("РасчетныйСчет");
	СтруктураЗаполнения.Вставить("СтатьяЗатрат");
	СтруктураЗаполнения.Вставить("СтатьяЗатратНаКомиссию");
	СтруктураЗаполнения.Вставить("Контрагент");
	СтруктураЗаполнения.Вставить("Отдел");
	СтруктураЗаполнения.Вставить("СтрокаПоиска");

	Возврат СтруктураЗаполнения;
	
КонецФункции

// Функция получает структуру для заполнения докуменента по расчетному счету и строке поиска.
//
//	Параметры: 
//		РасчетныйСчет - ссылка, справочник фуРасчетныеСчета
//		СтрокаПоиска - строка.
Функция ПолучитьДанныеДляЗаполненияДокумента(РасчетныйСчет,Комментарий) Экспорт
	
	СтруктураЗаполнения = Неопределено;
	
	АналитикиТаблица = ПолучитьАналитикиДляЗаполненияДокумента(РасчетныйСчет);
	
	Для каждого АналитикаСтрока из АналитикиТаблица Цикл
		
		Если СтрНайти(ВРег(Комментарий), ВРег(АналитикаСтрока.СтрокаПоиска)) > 0 Тогда
			
			СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияДокумента();
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения,АналитикаСтрока);
			Прервать;
	
		КонецЕсли;
		
	КонецЦикла;
	
 	Возврат СтруктураЗаполнения;	
	
КонецФункции

// Возвращает таблицу значений с аналитиками для заполнения документа.
//
//	Параметры:
//
//		РасчетныйСчет - ссылка (не обязательный), справочник фуРасчетныеСчета
//
Функция ПолучитьАналитикиДляЗаполненияДокумента(РасчетныйСчет = Неопределено) Экспорт
	
	АналитикиТаблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	фуАналитикиЗаполненияДокументаОперация.РасчетныйСчет КАК РасчетныйСчет,
		|	фуАналитикиЗаполненияДокументаОперация.СтрокаПоиска КАК СтрокаПоиска,
		|	фуАналитикиЗаполненияДокументаОперация.СтатьяЗатрат КАК СтатьяЗатрат,
		|	фуАналитикиЗаполненияДокументаОперация.СтатьяЗатратНаКомиссию КАК СтатьяЗатратНаКомиссию,
		|	фуАналитикиЗаполненияДокументаОперация.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.фуАналитикиЗаполненияДокументаОперация КАК фуАналитикиЗаполненияДокументаОперация
		|ГДЕ
		|	фуАналитикиЗаполненияДокументаОперация.РасчетныйСчет = &РасчетныйСчет";
	
	Если РасчетныйСчет = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		                           "фуАналитикиЗаполненияДокументаОперация.РасчетныйСчет = &РасчетныйСчет",	
								   "Истина");
	Иначе
		Запрос.УстановитьПараметр("РасчетныйСчет", РасчетныйСчет);	
	КонецЕсли;
	
	АналитикиТаблица = Запрос.Выполнить().Выгрузить();
	АналитикиТаблица.Индексы.Добавить("РасчетныйСчет");
	
	Возврат АналитикиТаблица; 
	
КонецФункции

// Заполняет расчетный счет документа "Операция".
//
//	Параметры:
//
// 		ДокументОбъект	- объект, документ "Операция".
//		РасчетныйСчет	- ссылка, справочник "фуРасчетныеСчета".
//
Процедура ЗаполнитьРасчетныйСчетДокументаОперацияНаСервере(ДокументОбъект,РасчетныйСчет) Экспорт
	
	Если ДокументОбъект.Оплата.Количество() > 0 Тогда
		ДокументОбъект.РасчетныйСчет = Справочники.фуРасчетныеСчета.ПустаяСсылка();
		ДокументОбъект.Оплата[0].РасчетныйСчет = РасчетныйСчет; 
	Иначе
		ДокументОбъект.РасчетныйСчет = РасчетныйСчет;  
	КонецЕсли;
	
КонецПроцедуры

// Получает расчетный счет документа "Операция"
//	Параметры:
//
// 		ДокументОбъект	- объект, документ "Операция".
Функция ПолучитьРасчетныйСчетДокументаОперация(ДокументОбъект) Экспорт 

	РасчетныйСчет = ДокументОбъект.РасчетныйСчет;
	
	Если Не ЗначениеЗаполнено(РасчетныйСчет) Тогда
		
		Если ДокументОбъект.Оплата.Количество() > 0 Тогда
			РасчетныйСчет = ДокументОбъект.Оплата[0].РасчетныйСчет; 		
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат РасчетныйСчет;

КонецФункции	

// Функция - Найти поле в таблице значений
//
// Параметры:
//  ИмяПоля			 - строка	 			- имя поля
//  ТаблицаРезультат - таблица значений	 	- таблица с данными
//  ПоискПоКонексту	 - булево	 			- признак поиска по контексту
// 
// Возвращаемое значение:
//   - 
//
Функция НайтиПолеВТЗ(ИмяПоля,ТаблицаРезультат,ПоискПоКонексту = Ложь) Экспорт
    
    ИмяПоляСтрока = "";
    
    Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл

        Если (СтрокаТаблицы["N1"] = "1") ИЛИ (СтрокаТаблицы["N1"] = 1) Тогда
        	Прервать;
        КонецЕсли; 
        
        Для каждого КолнкаТаблицы Из ТаблицаРезультат.Колонки Цикл
            
            Если ПоискПоКонексту Тогда
                Если СтрНайти(НРег(СтрокаТаблицы[КолнкаТаблицы.Имя]),НРег(ИмяПоля)) > 0 Тогда
                	ИмяПоляСтрока = КолнкаТаблицы.Имя;
                    Прервать;
                КонецЕсли; 
            Иначе 
            	Если НРег(ИмяПоля) = НРег(СтрокаТаблицы[КолнкаТаблицы.Имя]) Тогда
                	ИмяПоляСтрока = КолнкаТаблицы.Имя;
                    Прервать;
                КонецЕсли; 
            КонецЕсли;
            
        КонецЦикла; 
        
    КонецЦикла; 

    Возврат ИмяПоляСтрока;
    
КонецФункции